// Generated by CoffeeScript 1.10.0
(function() {
  d3.json('/archive.json', function(err, ds) {
    var dataCol, i, j, k, l, len, len1, ref;
    ds = d3.nest().key(function(d) {
      return d.species;
    }).sortKeys(d3.ascending).sortValues(function(a, b) {
      return d3.ascending(a.dataName, b.dataName);
    }).entries(ds);
    for (k = 0, len = ds.length; k < len; k++) {
      i = ds[k];
      ref = i.values;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        j = ref[l];
        j['key'] = j['dataName'];
        delete j['dataName'];
        j['url'] = "/download/" + j['id'] + "/" + j['key'];
      }
      i['_values'] = i['values'];
      delete i['values'];
    }
    ds = [
      {
        key: 'All',
        values: ds
      }
    ];
    dataCol = [
      {
        key: 'key',
        label: 'Data',
        showCount: true,
        width: '40%',
        type: 'text',
        classes: function(d) {
          if (d.url) {
            return 'clickable name';
          } else {
            return 'name';
          }
        },
        click: function(d) {
          if (d.url) {
            return window.location.href = d.url;
          }
        }
      }, {
        key: 'name',
        label: 'Uploader',
        width: '20%',
        type: 'text'
      }, {
        key: 'org',
        label: 'organization',
        width: '20%',
        type: 'text'
      }, {
        key: 'lastUpdate',
        label: 'Last Update',
        width: '20%',
        type: 'text'
      }
    ];
    return nv.addGraph(function() {
      var chart;
      chart = nv.models.indentedTree().columns(dataCol);
      return d3.select('#vis').datum(ds).call(chart);
    });
  });

}).call(this);
